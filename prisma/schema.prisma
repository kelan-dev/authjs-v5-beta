datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// ################################################################################################
// AuthJS Models 

enum UserRole {
  ADMIN
  USER
}

// The primary identity for a user.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  password           String?
  isTwoFactorEnabled Boolean  @default(false)
  role               UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

// Links one or more OAuth provider accounts to a User.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

// ################################################################################################

// Required for users to verify their email address.
model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("emailverificationtoken")
}

// Required for users to reset their password.
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("passwordresettoken")
}

// Required for users with two-factor authentication enabled.
model EmailOTPToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("emailotptoken")
}
